{"version":3,"sources":["components/ArtistForm.js","App.js","serviceWorker.js","index.js"],"names":["ArtistForm","props","handleChange","bind","handleSubmit","handleReset","event","this","onArtistChange","target","value","onArtistSubmit","searchValue","preventDefault","onGraphReset","id","className","onSubmit","type","onClick","onChange","placeholder","React","Component","App","handleArtistChange","handleArtistSubmit","handleGraphReset","handleNodeClick","getArtistNode","getRelatedArtistEdge","addArtistToGraph","addRelatedArtistsToGraph","drawRelatedArtists","state","graph","nodes","edges","drawnNodes","Set","drawnEdges","loadedArtists","options","autoResize","layout","hierarchical","width","color","inherit","smooth","physics","enabled","repulsion","centralGravity","springLength","springConstant","nodeDistance","damping","solver","interaction","hover","tooltipDelay","events","selectNode","setState","drawArtistAndRelatedArtists","artistNodeID","has","add","artistName","fetch","encodeURIComponent","then","res","json","result","artist","relatedArtists","related_artists","error","console","log","artistID","defaultVal","images","length","url","artistImage","getArtistImageOrDefault","label","name","title","shape","image","relatedArtistNodeID","from","to","slice","artistNode","push","i","relatedArtist","relatedArtistNode","relatedArtistEdge","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"uSAuCeA,G,gEAnCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBALJ,E,yDAQNG,GACTC,KAAKN,MAAMO,eAAeF,EAAMG,OAAOC,S,mCAG9BJ,GACTC,KAAKN,MAAMU,eAAeJ,KAAKN,MAAMW,aACrCN,EAAMO,mB,kCAGEP,GACRC,KAAKN,MAAMa,eACXR,EAAMO,mB,+BAIN,OACI,0BAAME,GAAG,WAAWC,UAAU,mBAAmBC,SAAUV,KAAKH,cAC5D,4BAAQc,KAAK,SAASC,QAASZ,KAAKF,aAApC,SACA,4BAAQa,KAAK,SAASC,QAASZ,KAAKH,cAApC,UACA,yBAAKW,GAAG,gBACJ,2BAAOG,KAAK,OAAOR,MAAOH,KAAKN,MAAMW,YAAaQ,SAAUb,KAAKL,aAAcmB,YAAY,sB,GA7BtFC,IAAMC,Y,kBCsOhBC,E,kDAnOb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,mBAAqB,EAAKA,mBAAmBtB,KAAxB,gBAC1B,EAAKuB,mBAAqB,EAAKA,mBAAmBvB,KAAxB,gBAC1B,EAAKwB,iBAAmB,EAAKA,iBAAiBxB,KAAtB,gBACxB,EAAKyB,gBAAkB,EAAKA,gBAAgBzB,KAArB,gBACvB,EAAK0B,cAAgB,EAAKA,cAAc1B,KAAnB,gBACrB,EAAK2B,qBAAuB,EAAKA,qBAAqB3B,KAA1B,gBAC5B,EAAK4B,iBAAmB,EAAKA,iBAAiB5B,KAAtB,gBACxB,EAAK6B,yBAA2B,EAAKA,yBAAyB7B,KAA9B,gBAChC,EAAK8B,mBAAqB,EAAKA,mBAAmB9B,KAAxB,gBAE1B,EAAK+B,MAAQ,CACXtB,YAAa,GACbuB,MAAO,CACLC,MAAO,GACPC,MAAO,IAETC,WAAY,IAAIC,IAChBC,WAAY,IAAID,IAChBE,cAAe,IAAIF,KAGrB,EAAKG,QAAU,CACbC,YAAY,EACZC,OAAQ,CACNC,cAAc,GAEhBR,MAAO,CACLS,MAAO,IACPC,MAAO,CAAEC,QAAS,QAClBC,OAAQ,CACN/B,KAAM,eAGVgC,QAAS,CACPC,SAAS,EACTC,UAAW,CACPC,eAAgB,EAChBC,aAAc,GACdC,eAAgB,IAChBC,aAAc,IACdC,QAAS,KAEbC,OAAQ,aAEVC,YAAa,CACXC,OAAO,EACPC,aAAc,MAIlB,EAAKC,OAAS,CACZC,WAAY,EAAKnC,iBArDF,E,+DAyDAhB,GACjBL,KAAKyD,SAAS,CAACpD,kB,yCAGEA,GACjBL,KAAK0D,4BAA4BrD,K,yCAIjCL,KAAKyD,SAAS,CACZpD,YAAa,GACbuB,MAAO,CACLC,MAAO,GACPC,MAAO,IAETC,WAAY,IAAIC,IAChBC,WAAY,IAAID,IAChBE,cAAe,IAAIF,Q,sCAIPjC,GACd,IAAM4D,EAAe5D,EAAM8B,MAAM,GAC5B7B,KAAK2B,MAAMO,cAAc0B,IAAID,KAChC3D,KAAK0B,mBAAmBiC,GACxB3D,KAAK2B,MAAMO,cAAc2B,IAAIF,M,kDAILG,GAAa,IAAD,OACtCC,MAAM,WAAaC,mBAAmBF,IACnCG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,IAAMC,EAASD,EAAOC,OAChBC,EAAiBF,EAAOG,gBAC9B,EAAK/C,iBAAiB,EAAKG,MAAMC,MAAOyC,GACxC,EAAK5C,yBAAyB,EAAKE,MAAMC,MAAOyC,EAAO7D,GAAI8D,MAE/D,SAACE,GACGC,QAAQC,IAAIF,Q,yCAKLG,GAAW,IAAD,OAC3BZ,MAAM,oBAAsBC,mBAAmBW,IAC5CV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,IAAME,EAAiBF,EAAOG,gBAC9B,EAAK9C,yBAAyB,EAAKE,MAAMC,MAAO+C,EAAUL,MAE9D,SAACE,GACGC,QAAQC,IAAIF,Q,8CAKAH,EAAQO,GAC9B,OAAIP,EAAOQ,OAAOC,OAAS,EAClBT,EAAOQ,OAAOR,EAAOQ,OAAOC,OAAS,GAAGC,IAE1CH,I,oCAGKP,GACZ,GAAc,MAAVA,EACF,OAAO,KAGT,IAAMW,EAAchF,KAAKiF,wBAAwBZ,EAAQ,MAUzD,MARmB,CACjB7D,GAAI6D,EAAO7D,GACX0E,MAAOb,EAAOc,KACdC,MAAOf,EAAOc,KACdE,MAAO,gBACPC,MAAON,K,2CAMUrB,EAAc4B,GACjC,OAAoB,MAAhB5B,GAA+C,MAAvB4B,EACnB,KAGiB,CACxB/E,GAAImD,EAAe,IAAM4B,EACzBC,KAAM7B,EACN8B,GAAIF,K,uCAMS3D,EAAOyC,GACtB,GAAc,MAAVA,EAAJ,CAIA,IAAIxC,EAAQD,EAAMC,MAAM6D,QAClB5D,EAAQF,EAAME,MAEd6D,EAAa3F,KAAKsB,cAAc+C,GAEjCrE,KAAK2B,MAAMI,WAAW6B,IAAI+B,EAAWnF,MACxCR,KAAK2B,MAAMI,WAAW8B,IAAI8B,EAAWnF,IACrCqB,EAAM+D,KAAKD,IAGb3F,KAAKyD,SAAS,CACZ7B,MAAO,CACLC,MAAOA,EACPC,MAAOA,Q,+CAKYF,EAAO+B,EAAcW,GAC5C,GAAsB,MAAlBA,EAAJ,CAOA,IAHA,IAAIzC,EAAQD,EAAMC,MAAM6D,QACpB5D,EAAQF,EAAME,MAAM4D,QAEfG,EAAI,EAAGA,EAAIvB,EAAeQ,OAAQe,IAAK,CAC9C,IAAMC,EAAgBxB,EAAeuB,GAE/BE,EAAoB/F,KAAKsB,cAAcwE,GACvCE,EAAoBhG,KAAKuB,qBAAqBoC,EAAcoC,EAAkBvF,IAE/ER,KAAK2B,MAAMI,WAAW6B,IAAImC,EAAkBvF,MAC/CR,KAAK2B,MAAMI,WAAW8B,IAAIkC,EAAkBvF,IAC5CqB,EAAM+D,KAAKG,IAGR/F,KAAK2B,MAAMM,WAAW2B,IAAIoC,EAAkBxF,MAC/CR,KAAK2B,MAAMM,WAAW4B,IAAImC,EAAkBxF,IAC5CsB,EAAM8D,KAAKI,IAIfhG,KAAKyD,SAAS,CACZ7B,MAAO,CACLC,MAAOA,EACPC,MAAOA,Q,+BAMX,OACE,yBAAKrB,UAAU,aACb,kBAAC,EAAD,CAAYJ,YAAaL,KAAK2B,MAAMtB,YAAaJ,eAAgBD,KAAKkB,mBAAoBd,eAAgBJ,KAAKmB,mBAAoBZ,aAAcP,KAAKoB,mBACtJ,yBAAKX,UAAU,cACb,kBAAC,IAAD,CACEmB,MAAO5B,KAAK2B,MAAMC,MAClBO,QAASnC,KAAKmC,QACdoB,OAAQvD,KAAKuD,e,GA5NPxC,IAAMC,WCOJiF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLC,QAAQD,MAAMA,EAAMwC,c","file":"static/js/main.897f8eb7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ArtistForm.css';\r\n\r\nclass ArtistForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.props.onArtistChange(event.target.value);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        this.props.onArtistSubmit(this.props.searchValue);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleReset(event) {\r\n        this.props.onGraphReset();\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"form-box\" className=\"transparent-blur\" onSubmit={this.handleSubmit}>\r\n                <button type=\"button\" onClick={this.handleReset}>Reset</button>\r\n                <button type=\"button\" onClick={this.handleSubmit}>Search</button>\r\n                <div id=\"search-field\">\r\n                    <input type=\"text\" value={this.props.searchValue} onChange={this.handleChange} placeholder=\"Artist Name\" />\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArtistForm;","import React from 'react';\r\nimport './App.css';\r\nimport ArtistForm from './components/ArtistForm';\r\nimport Graph from 'react-graph-vis';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleArtistChange = this.handleArtistChange.bind(this);\r\n    this.handleArtistSubmit = this.handleArtistSubmit.bind(this);\r\n    this.handleGraphReset = this.handleGraphReset.bind(this);\r\n    this.handleNodeClick = this.handleNodeClick.bind(this);\r\n    this.getArtistNode = this.getArtistNode.bind(this);\r\n    this.getRelatedArtistEdge = this.getRelatedArtistEdge.bind(this);\r\n    this.addArtistToGraph = this.addArtistToGraph.bind(this);\r\n    this.addRelatedArtistsToGraph = this.addRelatedArtistsToGraph.bind(this);\r\n    this.drawRelatedArtists = this.drawRelatedArtists.bind(this);\r\n\r\n    this.state = {\r\n      searchValue: '',\r\n      graph: {\r\n        nodes: [],\r\n        edges: []\r\n      },\r\n      drawnNodes: new Set(),\r\n      drawnEdges: new Set(),\r\n      loadedArtists: new Set(),\r\n    };\r\n\r\n    this.options = {\r\n      autoResize: true,\r\n      layout: {\r\n        hierarchical: false\r\n      },\r\n      edges: {\r\n        width: 0.15,\r\n        color: { inherit: \"from\" },\r\n        smooth: {\r\n          type: \"continuous\"\r\n        }\r\n      },\r\n      physics: {\r\n        enabled: true,\r\n        repulsion: {\r\n            centralGravity: 0.0,\r\n            springLength: 50,\r\n            springConstant: 0.01,\r\n            nodeDistance: 200,\r\n            damping: 0.09\r\n        },\r\n        solver: 'repulsion'\r\n      },\r\n      interaction: {\r\n        hover: true,\r\n        tooltipDelay: 200,\r\n      }\r\n    };\r\n\r\n    this.events = {\r\n      selectNode: this.handleNodeClick\r\n    };\r\n  }\r\n\r\n  handleArtistChange(searchValue) {\r\n    this.setState({searchValue});\r\n  }\r\n\r\n  handleArtistSubmit(searchValue) {\r\n    this.drawArtistAndRelatedArtists(searchValue);\r\n  }\r\n\r\n  handleGraphReset() {\r\n    this.setState({\r\n      searchValue: '',\r\n      graph: {\r\n        nodes: [],\r\n        edges: []\r\n      },\r\n      drawnNodes: new Set(),\r\n      drawnEdges: new Set(),\r\n      loadedArtists: new Set(),\r\n    });\r\n  }\r\n\r\n  handleNodeClick(event) {\r\n    const artistNodeID = event.nodes[0];\r\n    if (!this.state.loadedArtists.has(artistNodeID)) {\r\n      this.drawRelatedArtists(artistNodeID);\r\n      this.state.loadedArtists.add(artistNodeID);\r\n    }\r\n  }\r\n\r\n  drawArtistAndRelatedArtists(artistName) {\r\n    fetch('/search/' + encodeURIComponent(artistName))\r\n      .then(res => res.json())\r\n      .then(\r\n          (result) => {\r\n              const artist = result.artist;\r\n              const relatedArtists = result.related_artists;\r\n              this.addArtistToGraph(this.state.graph, artist);\r\n              this.addRelatedArtistsToGraph(this.state.graph, artist.id, relatedArtists);\r\n          },\r\n          (error) => {\r\n              console.log(error);\r\n          }\r\n      );\r\n  }\r\n\r\n  drawRelatedArtists(artistID) {\r\n    fetch('/related-artists/' + encodeURIComponent(artistID))\r\n      .then(res => res.json())\r\n      .then(\r\n          (result) => {\r\n              const relatedArtists = result.related_artists;\r\n              this.addRelatedArtistsToGraph(this.state.graph, artistID, relatedArtists);\r\n          },\r\n          (error) => {\r\n              console.log(error);\r\n          }\r\n      );\r\n  }\r\n\r\n  getArtistImageOrDefault(artist, defaultVal) {\r\n    if (artist.images.length > 0) {\r\n      return artist.images[artist.images.length - 1].url;\r\n    }\r\n    return defaultVal;\r\n  }\r\n\r\n  getArtistNode(artist) {\r\n    if (artist == null) {\r\n      return null;\r\n    }\r\n\r\n    const artistImage = this.getArtistImageOrDefault(artist, null);\r\n\r\n    const artistNode = {\r\n      id: artist.id,\r\n      label: artist.name,\r\n      title: artist.name,\r\n      shape: \"circularImage\",\r\n      image: artistImage\r\n    };\r\n\r\n    return artistNode;\r\n  }\r\n\r\n  getRelatedArtistEdge(artistNodeID, relatedArtistNodeID) {\r\n    if (artistNodeID == null || relatedArtistNodeID == null) {\r\n      return null;\r\n    }\r\n\r\n    const relatedArtistEdge = {\r\n      id: artistNodeID + ':' + relatedArtistNodeID,\r\n      from: artistNodeID,\r\n      to: relatedArtistNodeID\r\n    };\r\n\r\n    return relatedArtistEdge;\r\n  }\r\n\r\n  addArtistToGraph(graph, artist) {\r\n    if (artist == null) {\r\n      return;\r\n    }\r\n\r\n    let nodes = graph.nodes.slice();\r\n    const edges = graph.edges;\r\n\r\n    const artistNode = this.getArtistNode(artist);\r\n\r\n    if (!this.state.drawnNodes.has(artistNode.id)) {\r\n      this.state.drawnNodes.add(artistNode.id);\r\n      nodes.push(artistNode);\r\n    }\r\n\r\n    this.setState({\r\n      graph: {\r\n        nodes: nodes,\r\n        edges: edges\r\n      }\r\n    });\r\n  }\r\n\r\n  addRelatedArtistsToGraph(graph, artistNodeID, relatedArtists) {\r\n    if (relatedArtists == null) {\r\n      return;\r\n    }\r\n\r\n    let nodes = graph.nodes.slice();\r\n    let edges = graph.edges.slice();\r\n\r\n    for (let i = 0; i < relatedArtists.length; i++) {\r\n      const relatedArtist = relatedArtists[i];\r\n\r\n      const relatedArtistNode = this.getArtistNode(relatedArtist);\r\n      const relatedArtistEdge = this.getRelatedArtistEdge(artistNodeID, relatedArtistNode.id);\r\n\r\n      if (!this.state.drawnNodes.has(relatedArtistNode.id)) {\r\n        this.state.drawnNodes.add(relatedArtistNode.id);\r\n        nodes.push(relatedArtistNode);\r\n      }\r\n\r\n      if (!this.state.drawnEdges.has(relatedArtistEdge.id)) {\r\n        this.state.drawnEdges.add(relatedArtistEdge.id);\r\n        edges.push(relatedArtistEdge);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      graph: {\r\n        nodes: nodes,\r\n        edges: edges\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <ArtistForm searchValue={this.state.searchValue} onArtistChange={this.handleArtistChange} onArtistSubmit={this.handleArtistSubmit} onGraphReset={this.handleGraphReset}/>\r\n        <div className=\"fullscreen\">\r\n          <Graph\r\n            graph={this.state.graph}\r\n            options={this.options}\r\n            events={this.events}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}